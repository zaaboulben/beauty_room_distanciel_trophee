/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { MeshReflectorMaterial, useGLTF, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLoader } from '@react-three/fiber'

type GLTFResult = GLTF & {
    nodes: {
        table: THREE.Mesh
        mirror: THREE.Mesh
        chairRoulette: THREE.Mesh
        chevalet: THREE.Mesh
        armoirAlu: THREE.Mesh
        tabledeMassageEtage: THREE.Mesh
        trashTop: THREE.Mesh
        armoirBois: THREE.Mesh
        lightMirror: THREE.Mesh
        chairAssise: THREE.Mesh
        chairPied: THREE.Mesh
        tabledeMassageMatela: THREE.Mesh
        tabledeMassagecadre: THREE.Mesh
        tabledeMassageblanc: THREE.Mesh
        Wall: THREE.Mesh
        plastiqueWindow: THREE.Mesh
        windowGlass: THREE.Mesh
        sprayer: THREE.Mesh
        encen: THREE.Mesh
        sprayerBuse: THREE.Mesh
        vase: THREE.Mesh
        parquet: THREE.Mesh
        roof: THREE.Mesh
    }
    materials: {}
}



const chairchromemat = new THREE.MeshPhysicalMaterial({
    color: 0xFFFFFF,
    metalness: 0.8,
    roughness: 0.1,
    reflectivity: 0.1,
    name: "chairchromemat"
})
const matplatique = new THREE.MeshPhysicalMaterial({
    color: 0x000000,
    metalness: 0.8,
    roughness: 0.1,
    reflectivity: 0.1,
    name: "matplatique"
})




const mirrorLight = new THREE.MeshStandardMaterial({
    color: 0xffffff, emissive: 0xffffff, emissiveIntensity: 2000 ,transparent:true,opacity:0.5,toneMapped:false,


    name: "mirrorLight"
})
const Wallmat = new THREE.MeshPhysicalMaterial({
    color: 0xffffff, metalness: 0.1, roughness: .3,
    clearcoat: 0.1, clearcoatRoughness: 0.3, reflectivity: 0.1,

    name: "Wallmat"
})

const blackglossymat =
    new THREE.MeshPhysicalMaterial({
        color: 0x000000, metalness: 0.1, roughness: .3,
        clearcoat: 1, clearcoatRoughness: 0, reflectivity: 0.1,

        name: "blackglossymat"
    })
const whiteglossymat = new THREE.MeshPhysicalMaterial({
    color: 0xffffff, metalness: 0.1, roughness: .3,
    clearcoat: 0.1, clearcoatRoughness: 0.3, reflectivity: 3,

    name: "whiteglossymat"
})

const glassmat = new THREE.MeshPhysicalMaterial({
    transmission: 0.8,
    roughness: 0.5,
    metalness: 0.3,
    thickness: 2,
    opacity: 1,
    name: "glassmat"
})
const blackTissuMAT = new THREE.MeshPhysicalMaterial({
    color: 0x000000, metalness: 0.1, roughness: 1,
    clearcoat: 0.1, clearcoatRoughness: 1, reflectivity: 0.1,

    name: "blackTissuMAT"
})
const aluMat = new THREE.MeshPhysicalMaterial({

    color: "#c0c0c0",
    metalness: 0.8, roughness: 0.3,
    clearcoat: 0.1, clearcoatRoughness: 1, reflectivity: 0.1,

    name: "aluMat"
})


export function Model(props: JSX.IntrinsicElements['group']) {
    const [woodcolor, woodnormal,woodRough, fabricdispl, fabricnormal, fabricrougness] = useLoader(THREE.TextureLoader, ['/texture/wood/woodcolor.jpg', '/texture/wood/woodnormal.jpg','/texture/wood/woodroug.jpg', '/texture/fabric/chair/fabricdisplacement.png', '/texture/fabric/chair/fabricnormal.jpg', 'texture/fabric/chair/fabricroughness.jpg'])

// const [woodcolor,woodnormal
// ]=useLoader(THREE.TextureLoader,['/texture/wood/woodcolor.png','/texture/wood/woodnormal.png'])
woodcolor.wrapS = woodcolor.wrapT = THREE.RepeatWrapping;
woodnormal.wrapS = woodnormal.wrapT = THREE.RepeatWrapping;
woodcolor.repeat.set(10, 10);
woodnormal.repeat.set(10, 10);
woodcolor.flipY = false;
woodnormal.flipY = false;
woodcolor.rotation = -Math.PI / 2;
woodnormal.rotation = -Math.PI / 2;

fabricdispl.wrapS = fabricdispl.wrapT = THREE.RepeatWrapping;
fabricnormal.wrapS = fabricnormal.wrapT = THREE.RepeatWrapping;
fabricrougness.wrapS = fabricrougness.wrapT = THREE.RepeatWrapping;
fabricdispl.repeat.set(10, 10);
fabricnormal.repeat.set(10, 10);
fabricrougness.repeat.set(10, 10);
fabricdispl.flipY = false;
fabricnormal.flipY = false;
fabricrougness.flipY = false;
fabricdispl.rotation = -Math.PI / 2;
fabricnormal.rotation = -Math.PI / 2;
fabricrougness.rotation = -Math.PI / 2;

const chairematerial = new THREE.MeshPhysicalMaterial(
    {
        displacementMap: fabricdispl,
        displacementBias: 0.00,
        displacementScale: 0.0,
        normalMap: fabricnormal,
        normalScale: new THREE.Vector2(2,2),
        roughnessMap: fabricrougness,
        color: 0xFFFFFF


    }
)
const parquetMat = new THREE.MeshPhysicalMaterial({
    // roughness: 0.2,
    metalness: 0.1,
    roughnessMap: woodRough,
    map: woodcolor,
    normalMap: woodnormal,
    normalScale: new THREE.Vector2(3, 3),
    name: "parquetMat"

})


    const { nodes, materials } = useGLTF('/model/SceneDiplomedistanciel.glb') as GLTFResult
    return (
        <group {...props} dispose={null} >
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.table.geometry}
                material={whiteglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.mirror.geometry}
            >
                <MeshReflectorMaterial
                mirror={1}
                resolution={1024}
                color={0xFFFFFF}
                    metalness={0.1}
                    roughness={0}
                  
                    />
                  
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.chairRoulette.geometry}
                material={nodes.chairRoulette.material}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.chevalet.geometry}
                material={nodes.chevalet.material}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.armoirAlu.geometry}
                material={aluMat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.tabledeMassageEtage.geometry}
                material={blackTissuMAT}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.trashTop.geometry}
                material={blackTissuMAT}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.armoirBois.geometry}
                material={whiteglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.lightMirror.geometry}
                material={mirrorLight}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.chairAssise.geometry}
                material={chairematerial}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.chairPied.geometry}
                material={chairchromemat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.tabledeMassageMatela.geometry}
                material={blackTissuMAT}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.tabledeMassagecadre.geometry}
                material={blackglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.tabledeMassageblanc.geometry}
                material={whiteglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Wall.geometry}
                material={Wallmat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.plastiqueWindow.geometry}
                material={whiteglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.windowGlass.geometry}
                material={glassmat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.sprayer.geometry}
                material={blackglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.encen.geometry}
                material={blackglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.sprayerBuse.geometry}
                material={blackglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.vase.geometry}
                material={blackglossymat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.parquet.geometry}
                material={parquetMat}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.roof.geometry}
                material={nodes.roof.material}
            />

        </group>
    )
}

useGLTF.preload('/model/SceneDiplomedistanciel.glb')
